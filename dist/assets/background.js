const u="[Wafid Center Helper]",l="https://wafid.com/book-appointment/";chrome.runtime.onInstalled.addListener(t=>{console.log(`${u} Installed`,t)});chrome.runtime.onStartup.addListener(()=>{console.log(`${u} onStartup`)});chrome.action?.onClicked?.addListener(t=>{console.log(`${u} action clicked from`,t?.url)});async function d(t,a,c){const s=(await new Promise((r,e)=>{chrome.tabs.create({url:t},n=>{const o=chrome.runtime.lastError;o||!n||!n.id?e(new Error(o?.message||"Failed to open tab")):(console.log(`${u} created tab:`,n),r(n))})})).id;return await new Promise(r=>{const e=(n,o)=>{n===s&&o.status==="complete"&&(chrome.tabs.onUpdated.removeListener(e),r())};chrome.tabs.onUpdated.addListener(e)}),await new Promise((r,e)=>{chrome.scripting.executeScript({target:{tabId:s},func:a,args:[c]},()=>{const n=chrome.runtime.lastError;n?e(new Error(n.message)):r()})}),{tabId:s}}chrome.runtime.onMessage.addListener((t,a,c)=>{if(console.log("[BG] onMessage:",t,"from",a),t?.type==="automation-run-row"){const{requestId:i,row:s,receiverTabUrl:r,autoCloseMs:e}=t,n=r||l;return(async()=>{try{const{tabId:o}=await d(n,p,s);typeof e=="number"&&e>0&&setTimeout(()=>{try{chrome.tabs.remove(o),console.log(`${u} closed receiver tab`,o)}catch(y){console.warn(`${u} auto-close failed`,y)}},e),c({type:"automation-result",requestId:i,ok:!0,_via:"background"})}catch(o){console.error(`${u} automation-run-row failed:`,o);const m={type:"automation-result",requestId:i,ok:!1,error:String(o?.message||o),_via:"background"};c(m)}})(),!0}if(t?.type==="trigger-automation-in-new-tab"){const i=t.receiverTabUrl||l,s=t.row??{};return(async()=>{try{await d(i,p,s),c({ok:!0})}catch(r){c({ok:!1,error:r?.message||String(r)})}})(),!0}if(t?.type==="payment-found"){const i=String(t.payment||"");return fetch("https://your-backend.example.com/api/payment",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({payment:i})}).then(async r=>{if(!r.ok)throw new Error(`Backend ${r.status}`);const e=await r.json().catch(()=>({}));c({ok:!0,data:e})}).catch(r=>{console.error("[BG] backend post failed:",r),c({ok:!1,error:String(r)})}),!0}return!1});function p(t){console.log("[Receiver] automation start with row:",t);const a=(e,n)=>{if(!n)return;const o=document.querySelector(e);o&&(o.value=n,o.dispatchEvent(new Event("input",{bubbles:!0})),o.dispatchEvent(new Event("change",{bubbles:!0})))};a("input[name='name']",t?.name),a("input[name='email']",t?.email),a("input[name='phone']",t?.phone),a("input[name='national_id']",t?.nationalId),a("input[name='passport']",t?.passport),a("input[name='city']",t?.city),a("input[name='country']",t?.country),a("input[name='appointment_date']",t?.appointmentDate);const c=document.querySelector("button[type='submit'], .btn-submit, [data-action='submit']");c?c.click():console.warn("[Receiver] submit button not found");const i=()=>{const e=document.querySelector("[data-payment-id]");if(e)return e.getAttribute("data-payment-id");const n=document.querySelector("#paymentId, #payment, #payment-url");if(n)return(n.textContent||n.getAttribute("href")||"").trim()||null;const o=document.querySelector(".payment a, a.payment, a[href*='payment']");return o?o.href:null},s=i();if(s){try{chrome.runtime.sendMessage({type:"payment-found",ok:!0,payment:s})}catch(e){console.warn("[Receiver] sendMessage failed:",e)}return}const r=new MutationObserver(()=>{const e=i();if(e){try{r.disconnect()}catch{}try{chrome.runtime.sendMessage({type:"payment-found",ok:!0,payment:e})}catch(n){console.warn("[Receiver] sendMessage failed:",n)}}});r.observe(document.documentElement,{childList:!0,subtree:!0}),setTimeout(()=>{try{r.disconnect()}catch{}const e=i();if(e)try{chrome.runtime.sendMessage({type:"payment-found",ok:!0,payment:e})}catch(n){console.warn("[Receiver] sendMessage failed:",n)}else try{chrome.runtime.sendMessage({type:"payment-found",ok:!1,error:"Payment info not found within timeout"})}catch(n){console.warn("[Receiver] sendMessage failed:",n)}},6e4)}
//# sourceMappingURL=background.js.map
