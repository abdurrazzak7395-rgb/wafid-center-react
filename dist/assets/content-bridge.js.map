{"version":3,"file":"content-bridge.js","sources":["../../src/content-bridge.ts"],"sourcesContent":["type BridgeRequest = {\n  type: \"automation-run-row\";\n  requestId: string;\n  index: number;\n  row: unknown;\n  timeoutMs?: number;\n};\n\ntype BridgeResponse = {\n  type: \"automation-result\";\n  requestId: string;\n  ok: boolean;\n  error?: string;\n  _via?: string;\n};\n\n(() => {\n  const ALLOWED_ORIGINS = new Set<string>([\n    \"http://localhost:3000\", // Allowed origins for the message\n  ]);\n\n  const REQ_TYPE = \"automation-run-row\";\n  const RES_TYPE = \"automation-result\";\n  const DEFAULT_TIMEOUT = 60_000;\n\n  const isAllowedOrigin = (origin: string) =>\n    ALLOWED_ORIGINS.size === 0 || ALLOWED_ORIGINS.has(origin);\n\n  const pending = new Map<\n    string,\n    { origin: string; timerId: ReturnType<typeof setTimeout> }\n  >();\n\n  console.log(\"[BRIDGE] loaded on\", location.origin);\n\n  window.addEventListener(\"message\", (event: MessageEvent) => {\n    console.log(\"[BRIDGE] window.message\", {\n      origin: event.origin,\n      data: event.data,\n    });\n\n    try {\n      if (!isAllowedOrigin(event.origin)) {\n        console.warn(\"[BRIDGE] blocked origin:\", event.origin);\n        return;\n      }\n\n      const data = event.data as BridgeRequest;\n      if (!data || typeof data !== \"object\") return;\n      if (data.type !== REQ_TYPE) return;\n\n      const { requestId, index, row, timeoutMs } = data;\n      if (!requestId) return;\n      if (pending.has(requestId)) return;\n\n      const timerId = setTimeout(() => {\n        pending.delete(requestId);\n        const payload: BridgeResponse = {\n          type: RES_TYPE,\n          requestId,\n          ok: false,\n          error: \"Timeout waiting for background response\",\n          _via: \"content-bridge-timeout\",\n        };\n        try {\n          window.postMessage(payload, event.origin);\n        } catch (e) {\n          console.error(\"[BRIDGE] postMessage timeout notify failed:\", e);\n        }\n      }, timeoutMs ?? DEFAULT_TIMEOUT);\n\n      pending.set(requestId, { origin: event.origin, timerId });\n\n      chrome.runtime.sendMessage(\n        { type: REQ_TYPE, requestId, index, row },\n        (res?: BridgeResponse) => {\n          const lastErr = chrome.runtime?.lastError;\n          const entry = pending.get(requestId);\n          if (!entry) return;\n\n          clearTimeout(entry.timerId);\n          pending.delete(requestId);\n\n          const payload: BridgeResponse =\n            res && typeof res === \"object\"\n              ? { ...res, _via: \"content-bridge\" }\n              : {\n                  type: RES_TYPE,\n                  requestId,\n                  ok: !lastErr,\n                  error:\n                    lastErr?.message ??\n                    (res == null ? \"No response\" : undefined),\n                  _via: \"content-bridge\",\n                };\n\n          try {\n            console.log(\"[BRIDGE] posting back to page:\", payload);\n            window.postMessage(payload, entry.origin);\n          } catch (e) {\n            console.error(\"[BRIDGE] postMessage back failed:\", e);\n          }\n        }\n      );\n    } catch (err) {\n      try {\n        const reqId =\n          (event?.data as BridgeRequest)?.requestId ?? `req_${Date.now()}`;\n        const errorPayload: BridgeResponse = {\n          type: RES_TYPE,\n          requestId: reqId,\n          ok: false,\n          error: String(err),\n          _via: \"content-bridge-catch\",\n        };\n        console.error(\"[BRIDGE] exception:\", errorPayload);\n        window.postMessage(errorPayload, event.origin || \"*\");\n      } catch (e) {\n        console.error(\"[BRIDGE] exception notify failed:\", e);\n      }\n    }\n  });\n\n  try {\n    window.postMessage({ type: \"bridge-ready\", at: Date.now() }, \"*\");\n  } catch (e) {\n    console.warn(\"[BRIDGE] bridge-ready post failed:\", e);\n  }\n})();\n"],"names":["ALLOWED_ORIGINS","REQ_TYPE","RES_TYPE","DEFAULT_TIMEOUT","isAllowedOrigin","origin","pending","event","data","requestId","index","row","timeoutMs","timerId","payload","e","res","lastErr","entry","err","reqId","errorPayload"],"mappings":"CAgBC,IAAM,CACL,MAAMA,MAAsB,IAAY,CACtC,uBAAA,CACD,EAEKC,EAAW,qBACXC,EAAW,oBACXC,EAAkB,IAElBC,EAAmBC,GACvBL,EAAgB,OAAS,GAAKA,EAAgB,IAAIK,CAAM,EAEpDC,MAAc,IAKpB,QAAQ,IAAI,qBAAsB,SAAS,MAAM,EAEjD,OAAO,iBAAiB,UAAYC,GAAwB,CAC1D,QAAQ,IAAI,0BAA2B,CACrC,OAAQA,EAAM,OACd,KAAMA,EAAM,IAAA,CACb,EAED,GAAI,CACF,GAAI,CAACH,EAAgBG,EAAM,MAAM,EAAG,CAClC,QAAQ,KAAK,2BAA4BA,EAAM,MAAM,EACrD,MACF,CAEA,MAAMC,EAAOD,EAAM,KAEnB,GADI,CAACC,GAAQ,OAAOA,GAAS,UACzBA,EAAK,OAASP,EAAU,OAE5B,KAAM,CAAE,UAAAQ,EAAW,MAAAC,EAAO,IAAAC,EAAK,UAAAC,GAAcJ,EAE7C,GADI,CAACC,GACDH,EAAQ,IAAIG,CAAS,EAAG,OAE5B,MAAMI,EAAU,WAAW,IAAM,CAC/BP,EAAQ,OAAOG,CAAS,EACxB,MAAMK,EAA0B,CAC9B,KAAMZ,EACN,UAAAO,EACA,GAAI,GACJ,MAAO,0CACP,KAAM,wBAAA,EAER,GAAI,CACF,OAAO,YAAYK,EAASP,EAAM,MAAM,CAC1C,OAASQ,EAAG,CACV,QAAQ,MAAM,8CAA+CA,CAAC,CAChE,CACF,EAAGH,GAAaT,CAAe,EAE/BG,EAAQ,IAAIG,EAAW,CAAE,OAAQF,EAAM,OAAQ,QAAAM,EAAS,EAExD,OAAO,QAAQ,YACb,CAAE,KAAMZ,EAAU,UAAAQ,EAAW,MAAAC,EAAO,IAAAC,CAAA,EACnCK,GAAyB,CACxB,MAAMC,EAAU,OAAO,SAAS,UAC1BC,EAAQZ,EAAQ,IAAIG,CAAS,EACnC,GAAI,CAACS,EAAO,OAEZ,aAAaA,EAAM,OAAO,EAC1BZ,EAAQ,OAAOG,CAAS,EAExB,MAAMK,EACJE,GAAO,OAAOA,GAAQ,SAClB,CAAE,GAAGA,EAAK,KAAM,kBAChB,CACE,KAAMd,EACN,UAAAO,EACA,GAAI,CAACQ,EACL,MACEA,GAAS,UACRD,GAAO,KAAO,cAAgB,QACjC,KAAM,gBAAA,EAGd,GAAI,CACF,QAAQ,IAAI,iCAAkCF,CAAO,EACrD,OAAO,YAAYA,EAASI,EAAM,MAAM,CAC1C,OAASH,EAAG,CACV,QAAQ,MAAM,oCAAqCA,CAAC,CACtD,CACF,CAAA,CAEJ,OAASI,EAAK,CACZ,GAAI,CACF,MAAMC,EACHb,GAAO,MAAwB,WAAa,OAAO,KAAK,KAAK,GAC1Dc,EAA+B,CACnC,KAAMnB,EACN,UAAWkB,EACX,GAAI,GACJ,MAAO,OAAOD,CAAG,EACjB,KAAM,sBAAA,EAER,QAAQ,MAAM,sBAAuBE,CAAY,EACjD,OAAO,YAAYA,EAAcd,EAAM,QAAU,GAAG,CACtD,OAAS,EAAG,CACV,QAAQ,MAAM,oCAAqC,CAAC,CACtD,CACF,CACF,CAAC,EAED,GAAI,CACF,OAAO,YAAY,CAAE,KAAM,eAAgB,GAAI,KAAK,KAAI,EAAK,GAAG,CAClE,OAASQ,EAAG,CACV,QAAQ,KAAK,qCAAsCA,CAAC,CACtD,CACF,GAAA"}